#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "grammar.y".
#

require 'racc/parser'


  require "lexer"
  require "nodes"


class Parser < Racc::Parser

module_eval <<'..end grammar.y modeval..id36aede760a', 'grammar.y', 106
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end
..end grammar.y modeval..id36aede760a

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 0, 23, :_reduce_1,
 1, 23, :_reduce_2,
 1, 24, :_reduce_3,
 3, 24, :_reduce_4,
 2, 24, :_reduce_5,
 1, 25, :_reduce_none,
 1, 25, :_reduce_none,
 1, 25, :_reduce_none,
 1, 25, :_reduce_none,
 1, 25, :_reduce_none,
 1, 25, :_reduce_none,
 1, 25, :_reduce_none,
 1, 26, :_reduce_none,
 1, 26, :_reduce_none,
 1, 27, :_reduce_15,
 1, 27, :_reduce_16,
 1, 27, :_reduce_17,
 1, 27, :_reduce_18,
 1, 27, :_reduce_19,
 1, 28, :_reduce_20,
 4, 28, :_reduce_21,
 3, 28, :_reduce_22,
 6, 28, :_reduce_23,
 0, 34, :_reduce_24,
 1, 34, :_reduce_25,
 3, 34, :_reduce_26,
 1, 29, :_reduce_27,
 3, 30, :_reduce_28,
 3, 30, :_reduce_29,
 3, 31, :_reduce_30,
 6, 31, :_reduce_31,
 0, 36, :_reduce_32,
 1, 36, :_reduce_33,
 3, 36, :_reduce_34,
 3, 32, :_reduce_35,
 3, 33, :_reduce_36,
 6, 33, :_reduce_37,
 3, 35, :_reduce_38 ]

racc_reduce_n = 39

racc_shift_n = 61

racc_action_table = [
<<<<<<< HEAD
     5,     8,    10,    42,    37,    13,    15,    17,    19,     1,
     3,     6,     5,     8,    10,    30,    30,    13,    15,    17,
    19,     1,     3,     6,     5,     8,    10,    35,    30,    13,
    15,    17,    19,     1,     3,     6,     5,     8,    10,    30,
    47,    13,    15,    17,    19,     1,     3,     6,     5,     8,
    10,    49,    50,    13,    15,    17,    19,     1,     3,     6,
     5,     8,    10,    30,    29,    13,    15,    17,    19,     1,
     3,     6,     5,     8,    10,    25,    24,    13,    15,    17,
    19,     1,     3,     6,     5,     8,    10,    56,    30,    13,
    15,    17,    19,     1,     3,     6,     5,     8,    10,    28,
    28,    13,    15,    17,    19,     1,     3,     6,    52,    27,
    27,    37,    37,    21,    37,    41,    30,    22,    59,    53,
    45,    54,    44,    58,    45,    23,    37 ]

racc_action_check = [
     0,     0,     0,    30,    24,     0,     0,     0,     0,     0,
     0,     0,    26,    26,    26,    33,    34,    26,    26,    26,
    26,    26,    26,    26,    25,    25,    25,    23,    38,    25,
    25,    25,    25,    25,    25,    25,    49,    49,    49,    39,
    41,    49,    49,    49,    49,    49,    49,    49,    37,    37,
    37,    42,    43,    37,    37,    37,    37,    37,    37,    37,
    22,    22,    22,     9,     8,    22,    22,    22,    22,    22,
    22,    22,    21,    21,    21,     6,     5,    21,    21,    21,
    21,    21,    21,    21,    45,    45,    45,    50,    51,    45,
    45,    45,    45,    45,    45,    45,    10,    10,    10,    46,
     7,    10,    10,    10,    10,    10,    10,    10,    46,    46,
     7,    31,    29,     3,    53,    29,    31,     3,    55,    48,
    55,    48,    32,    54,    32,     4,    56 ]

racc_action_pointer = [
    -2,   nil,   nil,    96,   125,    63,    54,    94,    52,    44,
    94,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    70,    58,    27,   -10,    22,    10,   nil,   nil,    98,
    -9,    97,   104,    -4,    -3,   nil,   nil,    46,     9,    20,
   nil,    28,    34,    46,   nil,    82,    93,   nil,   101,    34,
    82,    69,   nil,   100,   111,   100,   112,   nil,   nil,   nil,
   nil ]

racc_action_default = [
    -1,   -19,   -12,   -20,   -39,   -39,   -27,    -2,   -39,    -3,
   -39,    -6,    -7,   -15,    -8,   -16,    -9,   -17,   -10,   -18,
   -11,   -24,   -39,   -39,   -39,   -39,    -5,   -14,   -13,   -39,
   -39,   -39,   -39,   -25,   -28,    61,   -35,   -39,   -29,    -4,
   -30,   -32,   -22,   -36,   -21,   -39,   -39,   -33,   -39,   -24,
   -39,   -26,   -38,   -39,   -39,   -39,   -39,   -31,   -34,   -23,
   -37 ]

racc_goto_table = [
    31,     7,    36,     4,    32,    48,   nil,    40,   nil,    43,
   nil,    33,    34,   nil,   nil,    38,    39,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    57,    55,   nil,    60,    51,   nil,   nil,    46,    33 ]

racc_goto_check = [
     3,     2,    13,     1,    12,    14,   nil,    13,   nil,    13,
   nil,     3,     3,   nil,   nil,     3,     3,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    13,    12,   nil,    13,     3,   nil,   nil,     2,     3 ]

racc_goto_pointer = [
   nil,     3,     1,   -10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -17,   -22,   -36 ]

racc_goto_default = [
   nil,   nil,   nil,     9,    26,    11,    12,    14,    16,    18,
    20,     2,   nil,   nil,   nil ]

racc_token_table = {
<<<<<<< HEAD
 false => 0,
 Object.new => 1,
 :A => 2,
 :CAN => 3,
 :IF => 4,
 :ELSE => 5,
 :NEWLINE => 6,
 :NUMBER => 7,
 :STRING => 8,
 :TRUE => 9,
 :FALSE => 10,
 :NIL => 11,
 :IDENTIFIER => 12,
 :CONSTANT => 13,
 :INDENT => 14,
 :DEDENT => 15,
 ";" => 16,
 "(" => 17,
 ")" => 18,
 "." => 19,
 "," => 20,
 "=" => 21 }

racc_use_result_var = true

racc_nt_base = 22

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'A',
'CAN',
'IF',
'ELSE',
'NEWLINE',
'NUMBER',
'STRING',
'TRUE',
'FALSE',
'NIL',
'IDENTIFIER',
'CONSTANT',
'INDENT',
'DEDENT',
'";"',
'"("',
'")"',
'"."',
'","',
'"="',
'$start',
'Root',
'Expressions',
'Expression',
'Terminator',
'Literal',
'Call',
'Constant',
'Assign',
'Def',
'Class',
'If',
'ArgList',
'Block',
'ParamList']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'grammar.y', 17
  def _reduce_1( val, _values, result )
 result = Nodes.new([])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 18
  def _reduce_2( val, _values, result )
 result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 22
  def _reduce_3( val, _values, result )
 result = Nodes.new(val)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 23
  def _reduce_4( val, _values, result )
 result = val[0] << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 24
  def _reduce_5( val, _values, result )
 result = Nodes.new([val[0]])
   result
  end
.,.,

 # reduce 6 omitted

 # reduce 7 omitted

 # reduce 8 omitted

 # reduce 9 omitted

 # reduce 10 omitted

 # reduce 11 omitted

 # reduce 12 omitted

 # reduce 13 omitted

 # reduce 14 omitted

module_eval <<'.,.,', 'grammar.y', 43
  def _reduce_15( val, _values, result )
 result = LiteralNode.new(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 44
  def _reduce_16( val, _values, result )
 result = LiteralNode.new(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 45
  def _reduce_17( val, _values, result )
 result = LiteralNode.new(true)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 46
  def _reduce_18( val, _values, result )
 result = LiteralNode.new(false)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 47
  def _reduce_19( val, _values, result )
 result = LiteralNode.new(nil)
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 51
  def _reduce_20( val, _values, result )
 result = CallNode.new(nil, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 52
  def _reduce_21( val, _values, result )
 result = CallNode.new(nil, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 53
  def _reduce_22( val, _values, result )
 result = CallNode.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 55
  def _reduce_23( val, _values, result )
 result = CallNode.new(val[0], val[2], val[4])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 59
  def _reduce_24( val, _values, result )
 result = []
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 60
  def _reduce_25( val, _values, result )
 result = val
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 61
  def _reduce_26( val, _values, result )
 result = val[0] << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 65
  def _reduce_27( val, _values, result )
 result = GetConstantNode.new(val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 69
  def _reduce_28( val, _values, result )
 result = SetLocalNode.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 70
  def _reduce_29( val, _values, result )
 result = SetConstantNode.new(val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 74
  def _reduce_30( val, _values, result )
 result = DefNode.new(val[1], [], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 76
  def _reduce_31( val, _values, result )
 result = DefNode.new(val[1], val[3], val[5])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 80
  def _reduce_32( val, _values, result )
 result = []
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 81
  def _reduce_33( val, _values, result )
 result = val
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 82
  def _reduce_34( val, _values, result )
 result = val[0] << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 86
  def _reduce_35( val, _values, result )
 result = ClassNode.new(val[1], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 90
  def _reduce_36( val, _values, result )
 result = IfNode.new(val[1], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 92
  def _reduce_37( val, _values, result )
 result = IfNode.new(val[1], val[2], val[5])
   result
  end
.,.,

module_eval <<'.,.,', 'grammar.y', 96
  def _reduce_38( val, _values, result )
 result = val[1]
   result
=======
module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_15(val, _values, result)
     result = LiteralNode.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 43)
  def _reduce_16(val, _values, result)
     result = LiteralNode.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_17(val, _values, result)
     result = LiteralNode.new(true)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_18(val, _values, result)
     result = LiteralNode.new(false)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_19(val, _values, result)
     result = LiteralNode.new(nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_20(val, _values, result)
     result = CallNode.new(nil, val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_21(val, _values, result)
     result = CallNode.new(nil, val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_22(val, _values, result)
     result = CallNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_23(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_24(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 59)
  def _reduce_25(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 60)
  def _reduce_26(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_27(val, _values, result)
     result = GetConstantNode.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 68)
  def _reduce_28(val, _values, result)
     result = SetLocalNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_29(val, _values, result)
     result = SetConstantNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 73)
  def _reduce_30(val, _values, result)
     result = DefNode.new(val[1], [], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_31(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_32(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_33(val, _values, result)
     result = val
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_34(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_35(val, _values, result)
     result = val[0] << val[2]
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_36(val, _values, result)
     result = IfNode.new(val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_37(val, _values, result)
     result = IfNode.new(val[1], val[2], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_38(val, _values, result)
     replace = val[1]
    result
>>>>>>> 47aead2a05c641f00321c72b975c1756fedfc406
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class Parser
