#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 49)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     8,     9,     7,    12,    13,    10,     8,     9,     7,    11,
    15,    10,    10,    10,    18 ]

racc_action_check = [
     0,     0,     0,     8,     9,     0,    10,    10,    10,     1,
    11,    10,    12,    13,    14 ]

racc_action_pointer = [
    -3,     9,   nil,   nil,   nil,   nil,   nil,   nil,    -2,    -1,
     3,    10,     4,     5,     5,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -12,   -12,    -1,    -2,    -3,    -4,    -5,    -8,   -12,   -12,
   -12,   -12,   -12,   -12,   -12,    19,    -9,   -10,   -11 ]

racc_goto_table = [
     2,    16,    17,     1,   nil,   nil,   nil,   nil,   nil,   nil,
    14 ]

racc_goto_check = [
     2,     6,     6,     1,   nil,   nil,   nil,   nil,   nil,   nil,
     2 ]

racc_goto_pointer = [
   nil,     3,     0,   nil,   nil,   nil,   -11,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     5,     6,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 11, :_reduce_1,
  1, 12, :_reduce_2,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 13, :_reduce_none,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  1, 15, :_reduce_8,
  3, 14, :_reduce_9,
  3, 14, :_reduce_10,
  3, 16, :_reduce_11 ]

racc_reduce_n = 12

racc_shift_n = 19

racc_token_table = {
  false => 0,
  :error => 1,
  :CAN => 2,
  :A => 3,
  :AN => 4,
  :CONSTANT => 5,
  :NEWLINE => 6,
  ";" => 7,
  "{" => 8,
  "}" => 9 }

racc_nt_base = 10

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "CAN",
  "A",
  "AN",
  "CONSTANT",
  "NEWLINE",
  "\";\"",
  "\"{\"",
  "\"}\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Class",
  "Constant",
  "Block",
  "Terminator" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 11)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 15)
  def _reduce_2(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

module_eval(<<'.,.,', 'grammar.y', 30)
  def _reduce_8(val, _values, result)
     result = ConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_9(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 35)
  def _reduce_10(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_11(val, _values, result)
     replace = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
