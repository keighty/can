#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require_relative "./lexer"
  require_relative "./nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 113)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    26,    45,    26,    29,    55,    34,    46,    30,    27,    22,
    27,    23,    19,    20,    21,    62,    12,    13,    14,    15,
    16,    17,    18,    22,    33,    23,    19,    20,    21,    28,
    12,    13,    14,    15,    16,    17,    18,    22,    51,    23,
    19,    20,    21,    39,    12,    13,    14,    15,    16,    17,
    18,    22,    28,    23,    19,    20,    21,    28,    12,    13,
    14,    15,    16,    17,    18,    22,    28,    23,    19,    20,
    21,    46,    12,    13,    14,    15,    16,    17,    18,    22,
    32,    23,    19,    20,    21,    57,    12,    13,    14,    15,
    16,    17,    18,    22,    31,    23,    19,    20,    21,    28,
    12,    13,    14,    15,    16,    17,    18,    22,    46,    23,
    19,    20,    21,    24,    12,    13,    14,    15,    16,    17,
    18,    22,    63,    23,    19,    20,    21,    37,    12,    13,
    14,    15,    16,    17,    18,    22,    28,    23,    19,    20,
    21,    46,    12,    13,    14,    15,    16,    17,    18,    28,
    28,    66,    46,    46,    52,    64,    53,    53,    60,    46,
    61 ]

racc_action_check = [
    56,    32,     2,    17,    45,    21,    32,    17,    56,    51,
     2,    51,    51,    51,    51,    56,    51,    51,    51,    51,
    51,    51,    51,    31,    20,    31,    31,    31,    31,    38,
    31,    31,    31,    31,    31,    31,    31,    53,    39,    53,
    53,    53,    53,    28,    53,    53,    53,    53,    53,    53,
    53,    25,    41,    25,    25,    25,    25,    42,    25,    25,
    25,    25,    25,    25,    25,     0,    43,     0,     0,     0,
     0,    34,     0,     0,     0,     0,     0,     0,     0,    46,
    19,    46,    46,    46,    46,    49,    46,    46,    46,    46,
    46,    46,    46,    23,    18,    23,    23,    23,    23,     3,
    23,    23,    23,    23,    23,    23,    23,    30,    33,    30,
    30,    30,    30,     1,    30,    30,    30,    30,    30,    30,
    30,    22,    57,    22,    22,    22,    22,    24,    22,    22,
    22,    22,    22,    22,    22,    29,    59,    29,    29,    29,
    29,    60,    29,    29,    29,    29,    29,    29,    29,    36,
    35,    61,    36,    35,    40,    58,    40,    58,    54,    63,
    54 ]

racc_action_pointer = [
    63,   113,    -6,    80,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -14,    73,    66,
     9,   -10,   119,    91,   127,    49,   nil,   nil,    29,   133,
   105,    21,   -16,    86,    49,   131,   130,   nil,    10,    21,
   136,    33,    38,    47,   nil,   -10,    77,   nil,   nil,    77,
   nil,     7,   nil,    35,   140,   nil,    -8,   119,   137,   117,
   119,   137,   nil,   137,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -42,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -16,   -17,   -18,   -19,   -20,   -21,   -28,   -42,
   -42,   -42,   -42,   -42,   -42,    -5,   -14,   -15,   -42,   -25,
   -42,   -42,   -42,   -42,   -42,   -42,   -42,    68,    -4,   -23,
   -42,   -26,   -29,   -30,   -31,   -33,   -42,   -36,   -37,   -38,
   -40,   -25,   -22,   -42,   -42,   -34,   -42,   -42,   -42,   -27,
   -42,   -42,   -41,   -42,   -24,   -32,   -35,   -39 ]

racc_goto_table = [
     2,    44,    47,    48,    49,    50,    35,    36,    40,    38,
     1,    54,   nil,    41,    42,    43,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    65,
    58,   nil,    67,   nil,   nil,    41,   nil,    59,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    56 ]

racc_goto_check = [
     2,    14,    14,    14,    14,    14,     3,     3,    13,     3,
     1,    15,   nil,     3,     3,     3,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,
    13,   nil,    14,   nil,   nil,     3,   nil,     3,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,    10,     0,   -16,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -21,   -31,   -34 ]

racc_goto_default = [
   nil,   nil,   nil,     3,    25,     4,     5,     6,     7,     8,
     9,    10,    11,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 25, :_reduce_1,
  1, 25, :_reduce_2,
  1, 26, :_reduce_3,
  3, 26, :_reduce_4,
  2, 26, :_reduce_5,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 29, :_reduce_16,
  1, 29, :_reduce_17,
  1, 29, :_reduce_18,
  1, 29, :_reduce_19,
  1, 29, :_reduce_20,
  1, 30, :_reduce_21,
  4, 30, :_reduce_22,
  3, 30, :_reduce_23,
  6, 30, :_reduce_24,
  0, 37, :_reduce_25,
  1, 37, :_reduce_26,
  3, 37, :_reduce_27,
  1, 31, :_reduce_28,
  3, 32, :_reduce_29,
  3, 32, :_reduce_30,
  3, 33, :_reduce_31,
  6, 33, :_reduce_32,
  0, 39, :_reduce_33,
  1, 39, :_reduce_34,
  3, 39, :_reduce_35,
  3, 34, :_reduce_36,
  3, 34, :_reduce_37,
  3, 35, :_reduce_38,
  6, 35, :_reduce_39,
  3, 36, :_reduce_40,
  3, 38, :_reduce_41 ]

racc_reduce_n = 42

racc_shift_n = 68

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :WHILE => 4,
  :CAN => 5,
  :A => 6,
  :AN => 7,
  :NEWLINE => 8,
  :NUMBER => 9,
  :STRING => 10,
  :TRUE => 11,
  :FALSE => 12,
  :NIL => 13,
  :IDENTIFIER => 14,
  :CONSTANT => 15,
  ";" => 16,
  "(" => 17,
  ")" => 18,
  "." => 19,
  "," => 20,
  "=" => 21,
  "{" => 22,
  "}" => 23 }

racc_nt_base = 24

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "WHILE",
  "CAN",
  "A",
  "AN",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "\";\"",
  "\"(\"",
  "\")\"",
  "\".\"",
  "\",\"",
  "\"=\"",
  "\"{\"",
  "\"}\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Constant",
  "Assign",
  "Def",
  "Class",
  "If",
  "While",
  "ArgList",
  "Block",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 17)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 18)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 22)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 25)
  def _reduce_5(val, _values, result)
     result = Nodes.new([val[0]]) 
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_16(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_17(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_18(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_19(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_20(val, _values, result)
     result = LiteralNode.new(nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_21(val, _values, result)
     result = CallNode.new(nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_22(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_23(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_24(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 61)
  def _reduce_25(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_26(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 63)
  def _reduce_27(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 67)
  def _reduce_28(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 71)
  def _reduce_29(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 72)
  def _reduce_30(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_31(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_32(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_33(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_34(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_35(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_36(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_37(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_38(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_39(val, _values, result)
     result = IfNode.new(val[1], val[2], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_40(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_41(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
