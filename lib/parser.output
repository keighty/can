state 42 contains 1 shift/reduce conflicts
state 43 contains 1 shift/reduce conflicts
state 49 contains 1 shift/reduce conflicts


-------- Grammar --------

rule 1 Root: 
rule 2 Root: Expressions
rule 3 Expressions: Expression
rule 4 Expressions: Expressions Terminator Expression
rule 5 Expressions: Expressions Terminator
rule 6 Expression: Literal
rule 7 Expression: Call
rule 8 Expression: Constant
rule 9 Expression: Assign
rule 10 Expression: Def
rule 11 Expression: Class
rule 12 Expression: If
rule 13 Expression: While
rule 14 Terminator: NEWLINE
rule 15 Terminator: ";"
rule 16 Literal: NUMBER
rule 17 Literal: STRING
rule 18 Literal: TRUE
rule 19 Literal: FALSE
rule 20 Literal: NIL
rule 21 Call: IDENTIFIER
rule 22 Call: IDENTIFIER "(" ArgList ")"
rule 23 Call: Expression "." IDENTIFIER
rule 24 Call: Expression "." IDENTIFIER "(" ArgList ")"
rule 25 ArgList: 
rule 26 ArgList: Expression
rule 27 ArgList: ArgList "," Expression
rule 28 Constant: CONSTANT
rule 29 Assign: IDENTIFIER "=" Expression
rule 30 Assign: CONSTANT "=" Expression
rule 31 Def: CAN IDENTIFIER Block
rule 32 Def: CAN IDENTIFIER "(" ParamList ")" Block
rule 33 ParamList: 
rule 34 ParamList: IDENTIFIER
rule 35 ParamList: ParamList "," IDENTIFIER
rule 36 Class: A CONSTANT Block
rule 37 Class: AN CONSTANT Block
rule 38 If: IF Expression Block
rule 39 If: IF Expression Block NEWLINE ELSE Block
rule 40 While: WHILE Expression Block
rule 41 Block: "{" Expressions "}"

------- Symbols -------

**Nonterminals, with rules where they appear

  $start (24)
    on right: 
    on left : 
  Root (25)
    on right: 
    on left : 1 2
  Expressions (26)
    on right: 2 4 5 41
    on left : 3 4 5
  Expression (27)
    on right: 3 4 23 24 26 27 29 30 38 39 40
    on left : 6 7 8 9 10 11 12 13
  Terminator (28)
    on right: 4 5
    on left : 14 15
  Literal (29)
    on right: 6
    on left : 16 17 18 19 20
  Call (30)
    on right: 7
    on left : 21 22 23 24
  Constant (31)
    on right: 8
    on left : 28
  Assign (32)
    on right: 9
    on left : 29 30
  Def (33)
    on right: 10
    on left : 31 32
  Class (34)
    on right: 11
    on left : 36 37
  If (35)
    on right: 12
    on left : 38 39
  While (36)
    on right: 13
    on left : 40
  ArgList (37)
    on right: 22 24 27
    on left : 25 26 27
  Block (38)
    on right: 31 32 36 37 38 39 40
    on left : 41
  ParamList (39)
    on right: 32 35
    on left : 33 34 35

**Terminals, with rules where they appear

  $end (0) 
  error (1) 
  IF (2) 38 39
  ELSE (3) 39
  WHILE (4) 40
  CAN (5) 31 32
  A (6) 36
  AN (7) 37
  NEWLINE (8) 14 39
  NUMBER (9) 16
  STRING (10) 17
  TRUE (11) 18
  FALSE (12) 19
  NIL (13) 20
  IDENTIFIER (14) 21 22 23 24 29 31 32 34 35
  CONSTANT (15) 28 30 36 37
  ";" (16) 15
  "(" (17) 22 24 32
  ")" (18) 22 24 32
  "." (19) 23 24
  "," (20) 27 35
  "=" (21) 29 30
  "{" (22) 41
  "}" (23) 41

--------- State ---------

state 0


  IF            shift, and go to state 22
  WHILE         shift, and go to state 23
  CAN           shift, and go to state 19
  A             shift, and go to state 20
  AN            shift, and go to state 21
  NUMBER        shift, and go to state 12
  STRING        shift, and go to state 13
  TRUE          shift, and go to state 14
  FALSE         shift, and go to state 15
  NIL           shift, and go to state 16
  IDENTIFIER    shift, and go to state 17
  CONSTANT      shift, and go to state 18
  $default      reduce using rule 1 (Root)

  Root          go to state 1
  Expressions   go to state 2
  Expression    go to state 3
  Literal       go to state 4
  Call          go to state 5
  Constant      go to state 6
  Assign        go to state 7
  Def           go to state 8
  Class         go to state 9
  If            go to state 10
  While         go to state 11

state 1


  $end          shift, and go to state 24


state 2

   2) Root : Expressions _
   4) Expressions : Expressions _ Terminator Expression
   5) Expressions : Expressions _ Terminator

  NEWLINE       shift, and go to state 26
  ";"           shift, and go to state 27
  $default      reduce using rule 2 (Root)

  Terminator    go to state 25

state 3

   3) Expressions : Expression _
  23) Call : Expression _ "." IDENTIFIER
  24) Call : Expression _ "." IDENTIFIER "(" ArgList ")"

  "."           shift, and go to state 28
  $default      reduce using rule 3 (Expressions)


state 4

   6) Expression : Literal _

  $default      reduce using rule 6 (Expression)


state 5

   7) Expression : Call _

  $default      reduce using rule 7 (Expression)


state 6

   8) Expression : Constant _

  $default      reduce using rule 8 (Expression)


state 7

   9) Expression : Assign _

  $default      reduce using rule 9 (Expression)


state 8

  10) Expression : Def _

  $default      reduce using rule 10 (Expression)


state 9

  11) Expression : Class _

  $default      reduce using rule 11 (Expression)


state 10

  12) Expression : If _

  $default      reduce using rule 12 (Expression)


state 11

  13) Expression : While _

  $default      reduce using rule 13 (Expression)


state 12

  16) Literal : NUMBER _

  $default      reduce using rule 16 (Literal)


state 13

  17) Literal : STRING _

  $default      reduce using rule 17 (Literal)


state 14

  18) Literal : TRUE _

  $default      reduce using rule 18 (Literal)


state 15

  19) Literal : FALSE _

  $default      reduce using rule 19 (Literal)


state 16

  20) Literal : NIL _

  $default      reduce using rule 20 (Literal)


state 17

  21) Call : IDENTIFIER _
  22) Call : IDENTIFIER _ "(" ArgList ")"
  29) Assign : IDENTIFIER _ "=" Expression

  "("           shift, and go to state 29
  "="           shift, and go to state 30
  $default      reduce using rule 21 (Call)


state 18

  28) Constant : CONSTANT _
  30) Assign : CONSTANT _ "=" Expression

  "="           shift, and go to state 31
  $default      reduce using rule 28 (Constant)


state 19

  31) Def : CAN _ IDENTIFIER Block
  32) Def : CAN _ IDENTIFIER "(" ParamList ")" Block

  IDENTIFIER    shift, and go to state 32


state 20

  36) Class : A _ CONSTANT Block

  CONSTANT      shift, and go to state 33


state 21

  37) Class : AN _ CONSTANT Block

  CONSTANT      shift, and go to state 34


state 22

  38) If : IF _ Expression Block
  39) If : IF _ Expression Block NEWLINE ELSE Block

  IF            shift, and go to state 22
  WHILE         shift, and go to state 23
  CAN           shift, and go to state 19
  A             shift, and go to state 20
  AN            shift, and go to state 21
  NUMBER        shift, and go to state 12
  STRING        shift, and go to state 13
  TRUE          shift, and go to state 14
  FALSE         shift, and go to state 15
  NIL           shift, and go to state 16
  IDENTIFIER    shift, and go to state 17
  CONSTANT      shift, and go to state 18

  Literal       go to state 4
  Call          go to state 5
  Constant      go to state 6
  Assign        go to state 7
  Def           go to state 8
  Class         go to state 9
  If            go to state 10
  While         go to state 11
  Expression    go to state 35

state 23

  40) While : WHILE _ Expression Block

  IF            shift, and go to state 22
  WHILE         shift, and go to state 23
  CAN           shift, and go to state 19
  A             shift, and go to state 20
  AN            shift, and go to state 21
  NUMBER        shift, and go to state 12
  STRING        shift, and go to state 13
  TRUE          shift, and go to state 14
  FALSE         shift, and go to state 15
  NIL           shift, and go to state 16
  IDENTIFIER    shift, and go to state 17
  CONSTANT      shift, and go to state 18

  Literal       go to state 4
  Call          go to state 5
  Constant      go to state 6
  Assign        go to state 7
  Def           go to state 8
  Class         go to state 9
  If            go to state 10
  While         go to state 11
  Expression    go to state 36

state 24


  $end          shift, and go to state 37


state 25

   4) Expressions : Expressions Terminator _ Expression
   5) Expressions : Expressions Terminator _

  IF            shift, and go to state 22
  WHILE         shift, and go to state 23
  CAN           shift, and go to state 19
  A             shift, and go to state 20
  AN            shift, and go to state 21
  NUMBER        shift, and go to state 12
  STRING        shift, and go to state 13
  TRUE          shift, and go to state 14
  FALSE         shift, and go to state 15
  NIL           shift, and go to state 16
  IDENTIFIER    shift, and go to state 17
  CONSTANT      shift, and go to state 18
  $default      reduce using rule 5 (Expressions)

  Expression    go to state 38
  Literal       go to state 4
  Call          go to state 5
  Constant      go to state 6
  Assign        go to state 7
  Def           go to state 8
  Class         go to state 9
  If            go to state 10
  While         go to state 11

state 26

  14) Terminator : NEWLINE _

  $default      reduce using rule 14 (Terminator)


state 27

  15) Terminator : ";" _

  $default      reduce using rule 15 (Terminator)


state 28

  23) Call : Expression "." _ IDENTIFIER
  24) Call : Expression "." _ IDENTIFIER "(" ArgList ")"

  IDENTIFIER    shift, and go to state 39


state 29

  22) Call : IDENTIFIER "(" _ ArgList ")"

  IF            shift, and go to state 22
  WHILE         shift, and go to state 23
  CAN           shift, and go to state 19
  A             shift, and go to state 20
  AN            shift, and go to state 21
  NUMBER        shift, and go to state 12
  STRING        shift, and go to state 13
  TRUE          shift, and go to state 14
  FALSE         shift, and go to state 15
  NIL           shift, and go to state 16
  IDENTIFIER    shift, and go to state 17
  CONSTANT      shift, and go to state 18
  $default      reduce using rule 25 (ArgList)

  Literal       go to state 4
  Call          go to state 5
  Constant      go to state 6
  Assign        go to state 7
  Def           go to state 8
  Class         go to state 9
  If            go to state 10
  While         go to state 11
  ArgList       go to state 40
  Expression    go to state 41

state 30

  29) Assign : IDENTIFIER "=" _ Expression

  IF            shift, and go to state 22
  WHILE         shift, and go to state 23
  CAN           shift, and go to state 19
  A             shift, and go to state 20
  AN            shift, and go to state 21
  NUMBER        shift, and go to state 12
  STRING        shift, and go to state 13
  TRUE          shift, and go to state 14
  FALSE         shift, and go to state 15
  NIL           shift, and go to state 16
  IDENTIFIER    shift, and go to state 17
  CONSTANT      shift, and go to state 18

  Literal       go to state 4
  Call          go to state 5
  Constant      go to state 6
  Assign        go to state 7
  Def           go to state 8
  Class         go to state 9
  If            go to state 10
  While         go to state 11
  Expression    go to state 42

state 31

  30) Assign : CONSTANT "=" _ Expression

  IF            shift, and go to state 22
  WHILE         shift, and go to state 23
  CAN           shift, and go to state 19
  A             shift, and go to state 20
  AN            shift, and go to state 21
  NUMBER        shift, and go to state 12
  STRING        shift, and go to state 13
  TRUE          shift, and go to state 14
  FALSE         shift, and go to state 15
  NIL           shift, and go to state 16
  IDENTIFIER    shift, and go to state 17
  CONSTANT      shift, and go to state 18

  Literal       go to state 4
  Call          go to state 5
  Constant      go to state 6
  Assign        go to state 7
  Def           go to state 8
  Class         go to state 9
  If            go to state 10
  While         go to state 11
  Expression    go to state 43

state 32

  31) Def : CAN IDENTIFIER _ Block
  32) Def : CAN IDENTIFIER _ "(" ParamList ")" Block

  "("           shift, and go to state 45
  "{"           shift, and go to state 46

  Block         go to state 44

state 33

  36) Class : A CONSTANT _ Block

  "{"           shift, and go to state 46

  Block         go to state 47

state 34

  37) Class : AN CONSTANT _ Block

  "{"           shift, and go to state 46

  Block         go to state 48

state 35

  23) Call : Expression _ "." IDENTIFIER
  24) Call : Expression _ "." IDENTIFIER "(" ArgList ")"
  38) If : IF Expression _ Block
  39) If : IF Expression _ Block NEWLINE ELSE Block

  "."           shift, and go to state 28
  "{"           shift, and go to state 46

  Block         go to state 49

state 36

  23) Call : Expression _ "." IDENTIFIER
  24) Call : Expression _ "." IDENTIFIER "(" ArgList ")"
  40) While : WHILE Expression _ Block

  "."           shift, and go to state 28
  "{"           shift, and go to state 46

  Block         go to state 50

state 37


  $default      accept


state 38

   4) Expressions : Expressions Terminator Expression _
  23) Call : Expression _ "." IDENTIFIER
  24) Call : Expression _ "." IDENTIFIER "(" ArgList ")"

  "."           shift, and go to state 28
  $default      reduce using rule 4 (Expressions)


state 39

  23) Call : Expression "." IDENTIFIER _
  24) Call : Expression "." IDENTIFIER _ "(" ArgList ")"

  "("           shift, and go to state 51
  $default      reduce using rule 23 (Call)


state 40

  22) Call : IDENTIFIER "(" ArgList _ ")"
  27) ArgList : ArgList _ "," Expression

  ")"           shift, and go to state 52
  ","           shift, and go to state 53


state 41

  23) Call : Expression _ "." IDENTIFIER
  24) Call : Expression _ "." IDENTIFIER "(" ArgList ")"
  26) ArgList : Expression _

  "."           shift, and go to state 28
  $default      reduce using rule 26 (ArgList)


state 42

  23) Call : Expression _ "." IDENTIFIER
  24) Call : Expression _ "." IDENTIFIER "(" ArgList ")"
  29) Assign : IDENTIFIER "=" Expression _

  "."           shift, and go to state 28
  "."           [reduce using rule 29 (Assign)]
  $default      reduce using rule 29 (Assign)


state 43

  23) Call : Expression _ "." IDENTIFIER
  24) Call : Expression _ "." IDENTIFIER "(" ArgList ")"
  30) Assign : CONSTANT "=" Expression _

  "."           shift, and go to state 28
  "."           [reduce using rule 30 (Assign)]
  $default      reduce using rule 30 (Assign)


state 44

  31) Def : CAN IDENTIFIER Block _

  $default      reduce using rule 31 (Def)


state 45

  32) Def : CAN IDENTIFIER "(" _ ParamList ")" Block

  IDENTIFIER    shift, and go to state 55
  $default      reduce using rule 33 (ParamList)

  ParamList     go to state 54

state 46

  41) Block : "{" _ Expressions "}"

  IF            shift, and go to state 22
  WHILE         shift, and go to state 23
  CAN           shift, and go to state 19
  A             shift, and go to state 20
  AN            shift, and go to state 21
  NUMBER        shift, and go to state 12
  STRING        shift, and go to state 13
  TRUE          shift, and go to state 14
  FALSE         shift, and go to state 15
  NIL           shift, and go to state 16
  IDENTIFIER    shift, and go to state 17
  CONSTANT      shift, and go to state 18

  Expression    go to state 3
  Expressions   go to state 56
  Literal       go to state 4
  Call          go to state 5
  Constant      go to state 6
  Assign        go to state 7
  Def           go to state 8
  Class         go to state 9
  If            go to state 10
  While         go to state 11

state 47

  36) Class : A CONSTANT Block _

  $default      reduce using rule 36 (Class)


state 48

  37) Class : AN CONSTANT Block _

  $default      reduce using rule 37 (Class)


state 49

  38) If : IF Expression Block _
  39) If : IF Expression Block _ NEWLINE ELSE Block

  NEWLINE       shift, and go to state 57
  NEWLINE       [reduce using rule 38 (If)]
  $default      reduce using rule 38 (If)


state 50

  40) While : WHILE Expression Block _

  $default      reduce using rule 40 (While)


state 51

  24) Call : Expression "." IDENTIFIER "(" _ ArgList ")"

  IF            shift, and go to state 22
  WHILE         shift, and go to state 23
  CAN           shift, and go to state 19
  A             shift, and go to state 20
  AN            shift, and go to state 21
  NUMBER        shift, and go to state 12
  STRING        shift, and go to state 13
  TRUE          shift, and go to state 14
  FALSE         shift, and go to state 15
  NIL           shift, and go to state 16
  IDENTIFIER    shift, and go to state 17
  CONSTANT      shift, and go to state 18
  $default      reduce using rule 25 (ArgList)

  Literal       go to state 4
  Call          go to state 5
  Constant      go to state 6
  Assign        go to state 7
  Def           go to state 8
  Class         go to state 9
  If            go to state 10
  While         go to state 11
  Expression    go to state 41
  ArgList       go to state 58

state 52

  22) Call : IDENTIFIER "(" ArgList ")" _

  $default      reduce using rule 22 (Call)


state 53

  27) ArgList : ArgList "," _ Expression

  IF            shift, and go to state 22
  WHILE         shift, and go to state 23
  CAN           shift, and go to state 19
  A             shift, and go to state 20
  AN            shift, and go to state 21
  NUMBER        shift, and go to state 12
  STRING        shift, and go to state 13
  TRUE          shift, and go to state 14
  FALSE         shift, and go to state 15
  NIL           shift, and go to state 16
  IDENTIFIER    shift, and go to state 17
  CONSTANT      shift, and go to state 18

  Literal       go to state 4
  Call          go to state 5
  Constant      go to state 6
  Assign        go to state 7
  Def           go to state 8
  Class         go to state 9
  If            go to state 10
  While         go to state 11
  Expression    go to state 59

state 54

  32) Def : CAN IDENTIFIER "(" ParamList _ ")" Block
  35) ParamList : ParamList _ "," IDENTIFIER

  ")"           shift, and go to state 60
  ","           shift, and go to state 61


state 55

  34) ParamList : IDENTIFIER _

  $default      reduce using rule 34 (ParamList)


state 56

   4) Expressions : Expressions _ Terminator Expression
   5) Expressions : Expressions _ Terminator
  41) Block : "{" Expressions _ "}"

  NEWLINE       shift, and go to state 26
  ";"           shift, and go to state 27
  "}"           shift, and go to state 62

  Terminator    go to state 25

state 57

  39) If : IF Expression Block NEWLINE _ ELSE Block

  ELSE          shift, and go to state 63


state 58

  24) Call : Expression "." IDENTIFIER "(" ArgList _ ")"
  27) ArgList : ArgList _ "," Expression

  ")"           shift, and go to state 64
  ","           shift, and go to state 53


state 59

  23) Call : Expression _ "." IDENTIFIER
  24) Call : Expression _ "." IDENTIFIER "(" ArgList ")"
  27) ArgList : ArgList "," Expression _

  "."           shift, and go to state 28
  $default      reduce using rule 27 (ArgList)


state 60

  32) Def : CAN IDENTIFIER "(" ParamList ")" _ Block

  "{"           shift, and go to state 46

  Block         go to state 65

state 61

  35) ParamList : ParamList "," _ IDENTIFIER

  IDENTIFIER    shift, and go to state 66


state 62

  41) Block : "{" Expressions "}" _

  $default      reduce using rule 41 (Block)


state 63

  39) If : IF Expression Block NEWLINE ELSE _ Block

  "{"           shift, and go to state 46

  Block         go to state 67

state 64

  24) Call : Expression "." IDENTIFIER "(" ArgList ")" _

  $default      reduce using rule 24 (Call)


state 65

  32) Def : CAN IDENTIFIER "(" ParamList ")" Block _

  $default      reduce using rule 32 (Def)


state 66

  35) ParamList : ParamList "," IDENTIFIER _

  $default      reduce using rule 35 (ParamList)


state 67

  39) If : IF Expression Block NEWLINE ELSE Block _

  $default      reduce using rule 39 (If)

